#include <iostream>
#include <list>


/*!
 * 
 * –ö–∞–º–Ω–∏
 * –í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—É "–ö–∞–º–Ω–∏": –∏–≥—Ä—É –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ –∫–∞–º–Ω–µ–π –ø–æ n –∏ ùëö —à—Ç—É–∫. 
 * 
 * –° –∫–∞–∂–¥—ã–º —Ö–æ–¥–æ–º –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –æ–¥–∏–Ω –∫–∞–º–µ–Ω—å (–∏–∑ –ª—é–±–æ–≥–æ –Ω–∞–±–æ—Ä–∞) –∏–ª–∏ –¥–≤–∞ –∫–∞–º–Ω—è (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –æ–±–æ–∏—Ö). 
 * [1, 0], [0, 1], [1, 1] 
 * 
 * –ö–æ–≥–¥–∞ –∫–∞–º–µ–Ω—å –∑–∞–±—Ä–∞–ª–∏, –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã. –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–º–µ–Ω—å. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –≤–∞–º–∏.
 * –í—ã –∏ –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–∞–µ—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
 * 
 */



/*!
 * –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @tparam T —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞
 * @param m –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
 * @param n –≤—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
 * @return —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
 */
template<typename T>
T** two_dim_massive(int m, int n){
    auto R = new T*[m];
    for (int i = 0; i < m; ++i) {
        R[i] = new T[n];
    }
    return R;
}

/*!
 * –û—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
 * @tparam T —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
 * @param ptr —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ
 * @param m –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
 * @param n –≤—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
 */
template<typename T>
void delete_two_dim_massive(T** ptr, int m, int n){
    for (int i = 0; i < m; ++i) {
        delete(ptr[i]);
    }
    delete(ptr);
}


/*!
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ö–æ–¥–æ–≤
 * @param m –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –≤ –ø–µ—Ä–≤–æ–º –Ω–∞–±–æ—Ä–µ
 * @param n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –≤–æ –≤—Ç–æ—Ä–æ–º –Ω–∞–±–æ—Ä–µ
 * @return –º–æ–∂–µ—Ç –ª–∏ –ø–æ–±–µ–¥–∏—Ç—å —Ö–æ–¥—è—â–∏–π?
 */
bool rocks(int m, int n){

    auto R = two_dim_massive<bool>(m + 1, n + 1);

    R[0][0] = 0;

    for (int i = 1; i <= m; ++i) {
        if(R[i - 1][0] == false)
            R[i][0] = true;
        else
            R[i][0] = false;
    }

    for (int j = 1; j <= n; ++j) {
        if(R[0][j - 1] == false)
            R[0][j] = true;
        else
            R[0][j] = false;
    }

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if(R[i][j - 1] && R[i - 1][j] && R[i - 1][j - 1])
                R[i][j] = false;
            else
                R[i][j] = true;
        }
    }
//  Print table
//    for (int i = 0; i <= m; ++i) {
//        for (int j = 0; j <= n; ++j) {
//            std::cout << R[i][j] << " ";
//        }
//        std::cout << std::endl;
//    }

    auto ret = R[m][n];
    delete_two_dim_massive<bool>(R, m + 1, n + 1);

    return ret;

}

int main() {

    int m, n;
    std::cin >> m;
    std::cin >> n;

    if(rocks(m, n))
        std::cout << "Win";
    else
        std::cout << "Lose";

    return 0;

}

